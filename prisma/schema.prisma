// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js 认证模型
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?   // NextAuth标准字段名
  password      String?   // 用于用户名密码登录
  provider      String?   @default("email")
  providerId    String?   @map("provider_id")
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // 关联关系
  accounts        Account[]
  sessions        Session[]
  giftLists       GiftList[]
  quizAnswers     QuizAnswer[]
  recommendations Recommendation[]
  shareLinks      ShareLink[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 核心业务模型
model Gift {
  id                  String   @id @default(cuid())
  name                String
  brand               String
  price               Float
  rating              Float    @default(0)
  reviewCount         Int      @default(0) @map("review_count")
  image               String
  shopUrl             String   @map("shop_url")
  category            String?
  description         String?
  tags                String?  // JSON字符串: ["electronics", "gadgets"]
  occasions           String?  // JSON字符串: ["birthday", "anniversary"]
  targetDemographics  String?  @map("target_demographics") // JSON字符串: {"age": "25-35", "gender": "any"}
  popularityScore     Float    @default(0) @map("popularity_score")
  embedding           String?  // JSON字符串 语义向量
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // 关联关系
  listItems ListItem[]

  // 索引
  @@index([category])
  @@index([popularityScore(sort: Desc)])
  @@index([price])
  @@index([rating(sort: Desc)])
  @@index([isActive])
  @@index([createdAt(sort: Desc)])
  @@map("gifts")
}

model GiftList {
  id             String    @id @default(cuid())
  name           String
  userId         String    @map("user_id")
  description    String?
  isPublic       Boolean   @default(false) @map("is_public")
  shareId        String?   @unique @map("share_id")
  shareToken     String?   @unique @map("share_token")
  shareExpiresAt DateTime? @map("share_expires_at")
  metadata       String?   // JSON字符串: {"theme": "birthday", "recipient": "mom"}
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // 关联关系
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  listItems  ListItem[]
  shareLinks ShareLink[]

  // 索引
  @@index([userId])
  @@index([shareId])
  @@index([shareToken])
  @@index([isPublic])
  @@index([createdAt(sort: Desc)])
  @@map("gift_lists")
}

model ListItem {
  id         String   @id @default(cuid())
  listId     String   @map("list_id")
  giftId     String   @map("gift_id")
  sortOrder  Int      @default(0) @map("sort_order")
  note       String?
  customData String?  @map("custom_data") // JSON字符串: {"priority": "high", "purchased": false}
  addedAt    DateTime @default(now()) @map("added_at")
  
  // 新增字段：收礼物的人的选择
  isSelected     Boolean  @default(false) @map("is_selected") // 是否被选中
  selectedBy     String?  @map("selected_by") // 选择者姓名
  selectionNote  String?  @map("selection_note") // 选择时的留言
  selectedAt     DateTime? @map("selected_at") // 选择时间

  // 关联关系
  giftList GiftList @relation(fields: [listId], references: [id], onDelete: Cascade)
  gift     Gift     @relation(fields: [giftId], references: [id], onDelete: Cascade)

  // 唯一约束和索引
  @@unique([listId, giftId])
  @@index([listId, sortOrder])
  @@map("list_items")
}

model QuizAnswer {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id") // 可选，支持匿名用户
  sessionId   String   @map("session_id") // 会话ID，用于匿名用户
  answers     String   // JSON字符串: {"relationship": "mother", "budget": "50-100"}
  preferences String?  // JSON字符串: {"interests": ["cooking", "reading"]}
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  recommendations Recommendation[]

  // 索引
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt(sort: Desc)])
  @@map("quiz_answers")
}

model Recommendation {
  id             String   @id @default(cuid())
  userId         String?  @map("user_id") // 可选，支持匿名用户
  quizAnswerId   String?  @map("quiz_answer_id") // 可选，支持occasion缓存
  type           String?  // "quiz" 或 "occasion"
  occasion       String?  // 用于occasion缓存
  giftIds        String?  @map("gift_ids") // JSON字符串 推荐的礼品ID数组
  data           String?  // JSON字符串 完整的商品数据（用于occasion缓存）
  algorithmData  String?  @map("algorithm_data") // JSON字符串: {"version": "v1", "weights": {...}}
  relevanceScore Float    @default(0) @map("relevance_score")
  status         String   @default("active") // active, expired, archived
  expiresAt      DateTime? @map("expires_at") // 可选，用于occasion缓存
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // 关联关系
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  quizAnswer QuizAnswer? @relation(fields: [quizAnswerId], references: [id], onDelete: Cascade)

  // 索引
  @@index([userId])
  @@index([quizAnswerId])
  @@index([type])
  @@index([occasion])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@unique([type, occasion]) // 确保每个occasion只有一个缓存记录
  @@map("recommendations")
}

model ShareLink {
  id          String    @id @default(cuid())
  token       String    @unique
  listId      String    @map("list_id")
  createdBy   String    @map("created_by")
  isActive    Boolean   @default(true) @map("is_active")
  viewCount   Int       @default(0) @map("view_count")
  expiresAt   DateTime? @map("expires_at")
  permissions String?   // JSON字符串: {"canView": true, "canCopy": false}
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关联关系
  giftList GiftList @relation(fields: [listId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // 索引
  @@index([token])
  @@index([listId])
  @@index([createdBy])
  @@index([isActive])
  @@index([expiresAt])
  @@map("share_links")
}
